#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Feb 25, 2021 08:31:05 AM +0200  platform: Windows NT

import sys
from tkinter import messagebox
from advanced_algebra import Fp
from advanced_algebra import Point
from advanced_algebra import EllipticCurves

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import GUI_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    GUI_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    GUI_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:

    #################
    ##  Addition   ##
    #################
    def addition(self):

        try:
            p1 = int(self.p1_E.get())
            p2 = int(self.p2_E.get())
            p = int(self.Fp_E.get())
        except ValueError:
            messagebox.showerror("Values Error", "Please enter valid integers")
            return
            
        self.p1 = Fp(p1,p)
        self.p2 = Fp(p2,p)

        result = self.p1+self.p2

        # Print to GUI
        self.results_TB.insert(tk.END, f"{p1}+{p2} = {result} (mod {p})\n")
    def subtraction(self):
        try:
            p1 = int(self.p1_E.get())
            p2 = int(self.p2_E.get())
            p = int(self.Fp_E.get())
        except ValueError:
            messagebox.showerror("Values Error", "Please enter valid integers")
            return
        
        self.p1 = Fp(p1,p)
        self.p2 = Fp(p2,p)

        result = self.p1-self.p2

        # Print to GUI
        self.results_TB.insert(tk.END, f"{p1}-{p2} = {result} (mod {p})\n")
    

        #######################
        ##  Multiplication   ##
        #######################
    def multiplication(self):
        try:
            p1 = int(self.p1_E.get())
            p2 = int(self.p2_E.get())
            p = int(self.Fp_E.get())
        except ValueError:
            messagebox.showerror("Values Error", "Please enter valid integers")
            return
        
        self.p1 = Fp(p1,p)
        self.p2 = Fp(p2,p)

        result = self.p1*self.p2

        # Print to GUI
        self.results_TB.insert(tk.END, f"{p1}*{p2} = {result} (mod {p})\n")

        #################
        ##  Division   ##
        #################
    def division(self):
        try:
            p1 = int(self.p1_E.get())
            p2 = int(self.p2_E.get())
            p = int(self.Fp_E.get())
        except ValueError:
            messagebox.showerror("Values Error", "Please enter valid integers")
            return

        self.p1 = Fp(p1,p)
        self.p2 = Fp(p2,p)

        result = self.p1/self.p2

        # Print to GUI
        if type(result) is not int:
            self.results_TB.insert(tk.END, f"{p1}/{p2} = {result}\n")
        else:
            self.results_TB.insert(tk.END, f"{p1}/{p2} = {result} (mod {p})\n")
    
        ################
        ##  Inverse   ##
        ################
    def inverse(self, method='mul'):

        try:
            p1 = int(self.p1_E.get())
            p = int(self.Fp_E.get())
        except ValueError:
            messagebox.showerror("Values Error", "Please enter valid integers")
            return
        
        self.p1 = Fp(p1,p)

        if method=='add':
            result = -self.p1.p
            # Print to GUI
            self.results_TB.insert(tk.END, f"inv({p1}),+ = {result} (mod {p})\n")
        elif method=='mul':
            result = self.p1.inverse()
            # Print to GUI
            self.results_TB.insert(tk.END, f"inv({p1}),* = {result} (mod {p})\n")
        # else:
        #     (-self.p1.p,self.p1.inverse)
    def show_field_orders(self):
        try:
            p = int(self.Fp_E.get())
        except ValueError:
            messagebox.showerror("Values Error", "Please enter valid integers")
            return

        add_group_order,mul_group_order = Fp.group_orders(Fp(1,int(self.Fp_E.get())))
        
        self.results_TB.insert(tk.END, f"(|F{p}|,+) = {add_group_order}\n")
        self.results_TB.insert(tk.END, f"(|F{p}|,*) = {mul_group_order}\n")
    def element_order(self, method='add'):

        try:
            p1 = int(self.p1_E.get())
            p = int(self.Fp_E.get())
        except ValueError:
            messagebox.showerror("Values Error", "Please enter valid integers")
            return
        
        if method=='add':
            result = Fp.add_element_order(Fp(p1,p))
            # Print to GUI
            self.results_TB.insert(tk.END, f"o({p1}),+ = {result}\n")
        
        elif method=='mul':
            result = Fp.mul_element_order(Fp(p1,p))
            # Print to GUI
            self.results_TB.insert(tk.END, f"o({p1}),* = {result}\n")
    def ebs(self):

        try:
            base = int(self.base_E.get())
            exp = int(self.exp_E.get())
            mod = int(self.modulo_E.get())
        except ValueError:
            messagebox.showerror("Values Error", "Please enter valid integers")
            return

        p = Fp(base,mod)

        #print(base,exp,mod)
        result = p.exp_by_square(base,exp,mod)

        # Print to GUI
        self.results_TB.insert(tk.END, f"{base}^{exp} = {result} (mod {mod})\n")
    def ec_addition(self):

        try:
            a = int(self.ec_a_E.get())
            b = int(self.ec_b_E.get())
            p = int(self.ec_p_E.get())
            xp = int(self.ec_p_x_E.get())
            xq = int(self.ec_q_x_E.get())
            yp = int(self.ec_p_y_E.get())
            yq = int(self.ec_q_y_E.get())
        except ValueError:
            messagebox.showerror("Values Error", "Please enter valid integers")
            return
            
        self.p1 = Point(xp,yp,p,a,b)
        self.p2 = Point(xq,yq,p,a,b)

        result = self.p1+self.p2

        # Print to GUI
        self.results_TB.insert(tk.END, f"{self.p1}+{self.p2} = {result} (mod {p})\n")
    def ec_inverse(self):
        
        try:
            a = int(self.ec_a_E.get())
            b = int(self.ec_b_E.get())
            p = int(self.ec_p_E.get())
            x = int(self.ec_p_x_E.get())
            y = int(self.ec_p_y_E.get())
        except ValueError:
            messagebox.showerror("Values Error", "Please enter valid integers")
            return
            
        result = Point(x,y,p,a,b).inverse()

        # Print to GUI
        self.results_TB.insert(tk.END, f"inv({x},{y}) = {result}\n")
    def ec_p_order(self):
        try:
            a = int(self.ec_a_E.get())
            b = int(self.ec_b_E.get())
            p = int(self.ec_p_E.get())
            x = int(self.ec_p_x_E.get())
            y = int(self.ec_p_y_E.get())
        except ValueError:
            messagebox.showerror("Values Error", "Please enter valid integers")
            return
        
        result = Point(x,y,p,a,b).point_order()

        # Print to GUI
        self.results_TB.insert(tk.END, f"o({x},{y}) = {result}\n")
    def ec_show_points(self):
        try:
            a = int(self.ec_a_E.get())
            b = int(self.ec_b_E.get())
            p = int(self.ec_p_E.get())
        except ValueError:
            messagebox.showerror("Values Error", "Please enter valid integers")
            return

        C = EllipticCurves(a,b,p)
        C.show_points()
        
    def ec_print_points(self):
        try:
            a = int(self.ec_a_E.get())
            b = int(self.ec_b_E.get())
            p = int(self.ec_p_E.get())
        except ValueError:
            messagebox.showerror("Values Error", "Please enter valid integers")
            return
        
        C = EllipticCurves(a,b,p)
        points = C.affine_elliptic_curve_points()

        # Print to GUI
        self.results_TB.insert(tk.END, "Caff = {\n")
        for i in points:
            self.results_TB.insert(tk.END, f"{i},")
        
        self.results_TB.insert(tk.END, "\n}\n")

    def clear_TB(self):
        self.results_TB.delete("1.0", "end")


    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("777x768+440+132")
        top.minsize(120, 1)
        top.maxsize(1916, 1053)
        top.resizable(1,  1)
        top.title("Advanced Algebra - Final Project")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Finite_Fields = tk.Frame(top)
        self.Finite_Fields.place(relx=0.013, rely=0.026, relheight=0.49
                , relwidth=0.47)
        self.Finite_Fields.configure(relief='groove')
        self.Finite_Fields.configure(borderwidth="2")
        self.Finite_Fields.configure(relief="groove")
        self.Finite_Fields.configure(background="#d9d9d9")
        self.Finite_Fields.configure(highlightbackground="#d9d9d9")
        self.Finite_Fields.configure(highlightcolor="black")

        self.Label1 = tk.Label(self.Finite_Fields)
        self.Label1.place(relx=0.247, rely=0.029, height=43, width=174)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Segoe UI} -size 20")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Finite Fields''')

        self.Label2 = tk.Label(self.Finite_Fields)
        self.Label2.place(relx=0.137, rely=0.17, height=22, width=34)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''P1''')

        self.Label2_1 = tk.Label(self.Finite_Fields)
        self.Label2_1.place(relx=0.247, rely=0.17, height=22, width=34)
        self.Label2_1.configure(activebackground="#f9f9f9")
        self.Label2_1.configure(activeforeground="black")
        self.Label2_1.configure(background="#d9d9d9")
        self.Label2_1.configure(disabledforeground="#a3a3a3")
        self.Label2_1.configure(foreground="#000000")
        self.Label2_1.configure(highlightbackground="#d9d9d9")
        self.Label2_1.configure(highlightcolor="black")
        self.Label2_1.configure(text='''P2''')

        self.Label2_2 = tk.Label(self.Finite_Fields)
        self.Label2_2.place(relx=0.384, rely=0.17, height=22, width=34)
        self.Label2_2.configure(activebackground="#f9f9f9")
        self.Label2_2.configure(activeforeground="black")
        self.Label2_2.configure(background="#d9d9d9")
        self.Label2_2.configure(disabledforeground="#a3a3a3")
        self.Label2_2.configure(foreground="#000000")
        self.Label2_2.configure(highlightbackground="#d9d9d9")
        self.Label2_2.configure(highlightcolor="black")
        self.Label2_2.configure(text='''Fp''')

        self.p1_E = tk.Entry(self.Finite_Fields)
        self.p1_E.place(relx=0.137, rely=0.226, height=20, relwidth=0.093)
        self.p1_E.configure(background="white")
        self.p1_E.configure(disabledforeground="#a3a3a3")
        self.p1_E.configure(font="TkFixedFont")
        self.p1_E.configure(foreground="#000000")
        self.p1_E.configure(highlightbackground="#d9d9d9")
        self.p1_E.configure(highlightcolor="black")
        self.p1_E.configure(insertbackground="black")
        self.p1_E.configure(selectbackground="blue")
        self.p1_E.configure(selectforeground="white")

        self.p2_E = tk.Entry(self.Finite_Fields)
        self.p2_E.place(relx=0.247, rely=0.226, height=20, relwidth=0.093)
        self.p2_E.configure(background="white")
        self.p2_E.configure(disabledforeground="#a3a3a3")
        self.p2_E.configure(font="TkFixedFont")
        self.p2_E.configure(foreground="#000000")
        self.p2_E.configure(highlightbackground="#d9d9d9")
        self.p2_E.configure(highlightcolor="black")
        self.p2_E.configure(insertbackground="black")
        self.p2_E.configure(selectbackground="blue")
        self.p2_E.configure(selectforeground="white")

        self.Fp_E = tk.Entry(self.Finite_Fields)
        self.Fp_E.place(relx=0.384, rely=0.226, height=20, relwidth=0.093)
        self.Fp_E.configure(background="white")
        self.Fp_E.configure(disabledforeground="#a3a3a3")
        self.Fp_E.configure(font="TkFixedFont")
        self.Fp_E.configure(foreground="#000000")
        self.Fp_E.configure(highlightbackground="#d9d9d9")
        self.Fp_E.configure(highlightcolor="black")
        self.Fp_E.configure(insertbackground="black")
        self.Fp_E.configure(selectbackground="blue")
        self.Fp_E.configure(selectforeground="white")

        self.field_orders_B = tk.Button(self.Finite_Fields)
        self.field_orders_B.place(relx=0.521, rely=0.221, height=24, width=107)
        self.field_orders_B.configure(activebackground="#ececec")
        self.field_orders_B.configure(activeforeground="#000000")
        self.field_orders_B.configure(background="#d9d9d9")
        self.field_orders_B.configure(command=self.show_field_orders)
        self.field_orders_B.configure(disabledforeground="#a3a3a3")
        self.field_orders_B.configure(foreground="#000000")
        self.field_orders_B.configure(highlightbackground="#d9d9d9")
        self.field_orders_B.configure(highlightcolor="black")
        self.field_orders_B.configure(pady="0")
        self.field_orders_B.configure(text='''Show Field Orders''')

        self.add_B = tk.Button(self.Finite_Fields)
        self.add_B.place(relx=0.137, rely=0.338, height=34, width=37)
        self.add_B.configure(activebackground="#ececec")
        self.add_B.configure(activeforeground="#000000")
        self.add_B.configure(background="#d9d9d9")
        self.add_B.configure(command=self.addition)
        self.add_B.configure(disabledforeground="#a3a3a3")
        self.add_B.configure(foreground="#000000")
        self.add_B.configure(highlightbackground="#d9d9d9")
        self.add_B.configure(highlightcolor="black")
        self.add_B.configure(pady="0")
        self.add_B.configure(text='''+''')

        self.sub_B = tk.Button(self.Finite_Fields)
        self.sub_B.place(relx=0.329, rely=0.338, height=34, width=37)
        self.sub_B.configure(activebackground="#ececec")
        self.sub_B.configure(activeforeground="#000000")
        self.sub_B.configure(background="#d9d9d9")
        self.sub_B.configure(command=self.subtraction)
        self.sub_B.configure(disabledforeground="#a3a3a3")
        self.sub_B.configure(foreground="#000000")
        self.sub_B.configure(highlightbackground="#d9d9d9")
        self.sub_B.configure(highlightcolor="black")
        self.sub_B.configure(pady="0")
        self.sub_B.configure(text='''-''')

        self.mul_B = tk.Button(self.Finite_Fields)
        self.mul_B.place(relx=0.521, rely=0.338, height=34, width=37)
        self.mul_B.configure(activebackground="#ececec")
        self.mul_B.configure(activeforeground="#000000")
        self.mul_B.configure(background="#d9d9d9")
        self.mul_B.configure(command=self.multiplication)
        self.mul_B.configure(disabledforeground="#a3a3a3")
        self.mul_B.configure(foreground="#000000")
        self.mul_B.configure(highlightbackground="#d9d9d9")
        self.mul_B.configure(highlightcolor="black")
        self.mul_B.configure(pady="0")
        self.mul_B.configure(text='''x''')

        self.div_B = tk.Button(self.Finite_Fields)
        self.div_B.place(relx=0.712, rely=0.338, height=34, width=37)
        self.div_B.configure(activebackground="#ececec")
        self.div_B.configure(activeforeground="#000000")
        self.div_B.configure(background="#d9d9d9")
        self.div_B.configure(command=self.division)
        self.div_B.configure(disabledforeground="#a3a3a3")
        self.div_B.configure(foreground="#000000")
        self.div_B.configure(highlightbackground="#d9d9d9")
        self.div_B.configure(highlightcolor="black")
        self.div_B.configure(pady="0")
        self.div_B.configure(text='''/''')

        self.Button2 = tk.Button(self.Finite_Fields)
        self.Button2.place(relx=0.11, rely=0.479, height=34, width=57)
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(command=lambda: self.inverse('add'))
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''inv (+)''')

        self.Button2_1 = tk.Button(self.Finite_Fields)
        self.Button2_1.place(relx=0.301, rely=0.479, height=34, width=57)
        self.Button2_1.configure(activebackground="#ececec")
        self.Button2_1.configure(activeforeground="#000000")
        self.Button2_1.configure(background="#d9d9d9")
        self.Button2_1.configure(command=lambda: self.inverse('mul'))
        self.Button2_1.configure(disabledforeground="#a3a3a3")
        self.Button2_1.configure(foreground="#000000")
        self.Button2_1.configure(highlightbackground="#d9d9d9")
        self.Button2_1.configure(highlightcolor="black")
        self.Button2_1.configure(pady="0")
        self.Button2_1.configure(text='''inv (*)''')

        self.Button2_1_1 = tk.Button(self.Finite_Fields)
        self.Button2_1_1.place(relx=0.493, rely=0.479, height=34, width=57)
        self.Button2_1_1.configure(activebackground="#ececec")
        self.Button2_1_1.configure(activeforeground="#000000")
        self.Button2_1_1.configure(background="#d9d9d9")
        self.Button2_1_1.configure(command=lambda: self.element_order('add'))
        self.Button2_1_1.configure(disabledforeground="#a3a3a3")
        self.Button2_1_1.configure(foreground="#000000")
        self.Button2_1_1.configure(highlightbackground="#d9d9d9")
        self.Button2_1_1.configure(highlightcolor="black")
        self.Button2_1_1.configure(pady="0")
        self.Button2_1_1.configure(text='''o(p), +''')

        self.Button2_1_1_1 = tk.Button(self.Finite_Fields)
        self.Button2_1_1_1.place(relx=0.685, rely=0.479, height=34, width=57)
        self.Button2_1_1_1.configure(activebackground="#ececec")
        self.Button2_1_1_1.configure(activeforeground="#000000")
        self.Button2_1_1_1.configure(background="#d9d9d9")
        self.Button2_1_1_1.configure(command=lambda: self.element_order('mul'))
        self.Button2_1_1_1.configure(disabledforeground="#a3a3a3")
        self.Button2_1_1_1.configure(foreground="#000000")
        self.Button2_1_1_1.configure(highlightbackground="#d9d9d9")
        self.Button2_1_1_1.configure(highlightcolor="black")
        self.Button2_1_1_1.configure(pady="0")
        self.Button2_1_1_1.configure(text='''o(p), *''')

        self.Label1_1 = tk.Label(self.Finite_Fields)
        self.Label1_1.place(relx=0.164, rely=0.62, height=43, width=234)
        self.Label1_1.configure(activebackground="#f9f9f9")
        self.Label1_1.configure(activeforeground="black")
        self.Label1_1.configure(background="#d9d9d9")
        self.Label1_1.configure(disabledforeground="#a3a3a3")
        self.Label1_1.configure(font="-family {Segoe UI} -size 14")
        self.Label1_1.configure(foreground="#000000")
        self.Label1_1.configure(highlightbackground="#d9d9d9")
        self.Label1_1.configure(highlightcolor="black")
        self.Label1_1.configure(text='''Exponentiation by Squaring''')

        self.Label2_3 = tk.Label(self.Finite_Fields)
        self.Label2_3.place(relx=0.356, rely=0.731, height=22, width=34)
        self.Label2_3.configure(activebackground="#f9f9f9")
        self.Label2_3.configure(activeforeground="black")
        self.Label2_3.configure(background="#d9d9d9")
        self.Label2_3.configure(disabledforeground="#a3a3a3")
        self.Label2_3.configure(foreground="#000000")
        self.Label2_3.configure(highlightbackground="#d9d9d9")
        self.Label2_3.configure(highlightcolor="black")
        self.Label2_3.configure(text='''Base''')

        self.Label2_3_1 = tk.Label(self.Finite_Fields)
        self.Label2_3_1.place(relx=0.466, rely=0.731, height=22, width=34)
        self.Label2_3_1.configure(activebackground="#f9f9f9")
        self.Label2_3_1.configure(activeforeground="black")
        self.Label2_3_1.configure(background="#d9d9d9")
        self.Label2_3_1.configure(disabledforeground="#a3a3a3")
        self.Label2_3_1.configure(foreground="#000000")
        self.Label2_3_1.configure(highlightbackground="#d9d9d9")
        self.Label2_3_1.configure(highlightcolor="black")
        self.Label2_3_1.configure(text='''Exp''')

        self.Label2_3_1_1 = tk.Label(self.Finite_Fields)
        self.Label2_3_1_1.place(relx=0.575, rely=0.731, height=22, width=44)
        self.Label2_3_1_1.configure(activebackground="#f9f9f9")
        self.Label2_3_1_1.configure(activeforeground="black")
        self.Label2_3_1_1.configure(background="#d9d9d9")
        self.Label2_3_1_1.configure(disabledforeground="#a3a3a3")
        self.Label2_3_1_1.configure(foreground="#000000")
        self.Label2_3_1_1.configure(highlightbackground="#d9d9d9")
        self.Label2_3_1_1.configure(highlightcolor="black")
        self.Label2_3_1_1.configure(text='''Modulo''')

        self.base_E = tk.Entry(self.Finite_Fields)
        self.base_E.place(relx=0.356, rely=0.79, height=20, relwidth=0.093)
        self.base_E.configure(background="white")
        self.base_E.configure(disabledforeground="#a3a3a3")
        self.base_E.configure(font="TkFixedFont")
        self.base_E.configure(foreground="#000000")
        self.base_E.configure(highlightbackground="#d9d9d9")
        self.base_E.configure(highlightcolor="black")
        self.base_E.configure(insertbackground="black")
        self.base_E.configure(selectbackground="blue")
        self.base_E.configure(selectforeground="white")

        self.exp_E = tk.Entry(self.Finite_Fields)
        self.exp_E.place(relx=0.466, rely=0.79, height=20, relwidth=0.093)
        self.exp_E.configure(background="white")
        self.exp_E.configure(disabledforeground="#a3a3a3")
        self.exp_E.configure(font="TkFixedFont")
        self.exp_E.configure(foreground="#000000")
        self.exp_E.configure(highlightbackground="#d9d9d9")
        self.exp_E.configure(highlightcolor="black")
        self.exp_E.configure(insertbackground="black")
        self.exp_E.configure(selectbackground="blue")
        self.exp_E.configure(selectforeground="white")

        self.modulo_E = tk.Entry(self.Finite_Fields)
        self.modulo_E.place(relx=0.603, rely=0.79, height=20, relwidth=0.093)
        self.modulo_E.configure(background="white")
        self.modulo_E.configure(disabledforeground="#a3a3a3")
        self.modulo_E.configure(font="TkFixedFont")
        self.modulo_E.configure(foreground="#000000")
        self.modulo_E.configure(highlightbackground="#d9d9d9")
        self.modulo_E.configure(highlightcolor="black")
        self.modulo_E.configure(insertbackground="black")
        self.modulo_E.configure(selectbackground="blue")
        self.modulo_E.configure(selectforeground="white")

        self.Button3 = tk.Button(self.Finite_Fields)
        self.Button3.place(relx=0.438, rely=0.872, height=24, width=57)
        self.Button3.configure(activebackground="#ececec")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(command=self.ebs)
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''Calculate''')

        self.Elliptic_Curves = tk.Frame(top)
        self.Elliptic_Curves.place(relx=0.502, rely=0.026, relheight=0.487
                , relwidth=0.47)
        self.Elliptic_Curves.configure(relief='groove')
        self.Elliptic_Curves.configure(borderwidth="2")
        self.Elliptic_Curves.configure(relief="groove")
        self.Elliptic_Curves.configure(background="#d9d9d9")
        self.Elliptic_Curves.configure(highlightbackground="#d9d9d9")
        self.Elliptic_Curves.configure(highlightcolor="black")

        self.Label1_2 = tk.Label(self.Elliptic_Curves)
        self.Label1_2.place(relx=0.274, rely=0.027, height=43, width=174)
        self.Label1_2.configure(activebackground="#f9f9f9")
        self.Label1_2.configure(activeforeground="black")
        self.Label1_2.configure(background="#d9d9d9")
        self.Label1_2.configure(disabledforeground="#a3a3a3")
        self.Label1_2.configure(font="-family {Segoe UI} -size 20")
        self.Label1_2.configure(foreground="#000000")
        self.Label1_2.configure(highlightbackground="#d9d9d9")
        self.Label1_2.configure(highlightcolor="black")
        self.Label1_2.configure(text='''Elliptic Curves''')

        self.Label2_4 = tk.Label(self.Elliptic_Curves)
        self.Label2_4.place(relx=0.329, rely=0.16, height=22, width=34)
        self.Label2_4.configure(activebackground="#f9f9f9")
        self.Label2_4.configure(activeforeground="black")
        self.Label2_4.configure(background="#d9d9d9")
        self.Label2_4.configure(disabledforeground="#a3a3a3")
        self.Label2_4.configure(foreground="#000000")
        self.Label2_4.configure(highlightbackground="#d9d9d9")
        self.Label2_4.configure(highlightcolor="black")
        self.Label2_4.configure(text='''a''')

        self.ec_a_E = tk.Entry(self.Elliptic_Curves)
        self.ec_a_E.place(relx=0.329, rely=0.214, height=20, relwidth=0.093)
        self.ec_a_E.configure(background="white")
        self.ec_a_E.configure(disabledforeground="#a3a3a3")
        self.ec_a_E.configure(font="TkFixedFont")
        self.ec_a_E.configure(foreground="#000000")
        self.ec_a_E.configure(highlightbackground="#d9d9d9")
        self.ec_a_E.configure(highlightcolor="black")
        self.ec_a_E.configure(insertbackground="black")
        self.ec_a_E.configure(selectbackground="blue")
        self.ec_a_E.configure(selectforeground="white")

        self.Label2_4_1 = tk.Label(self.Elliptic_Curves)
        self.Label2_4_1.place(relx=0.466, rely=0.16, height=22, width=34)
        self.Label2_4_1.configure(activebackground="#f9f9f9")
        self.Label2_4_1.configure(activeforeground="black")
        self.Label2_4_1.configure(background="#d9d9d9")
        self.Label2_4_1.configure(disabledforeground="#a3a3a3")
        self.Label2_4_1.configure(foreground="#000000")
        self.Label2_4_1.configure(highlightbackground="#d9d9d9")
        self.Label2_4_1.configure(highlightcolor="black")
        self.Label2_4_1.configure(text='''b''')

        self.Label2_4_1_1 = tk.Label(self.Elliptic_Curves)
        self.Label2_4_1_1.place(relx=0.63, rely=0.16, height=22, width=34)
        self.Label2_4_1_1.configure(activebackground="#f9f9f9")
        self.Label2_4_1_1.configure(activeforeground="black")
        self.Label2_4_1_1.configure(background="#d9d9d9")
        self.Label2_4_1_1.configure(disabledforeground="#a3a3a3")
        self.Label2_4_1_1.configure(foreground="#000000")
        self.Label2_4_1_1.configure(highlightbackground="#d9d9d9")
        self.Label2_4_1_1.configure(highlightcolor="black")
        self.Label2_4_1_1.configure(text='''p''')

        self.ec_p_E = tk.Entry(self.Elliptic_Curves)
        self.ec_p_E.place(relx=0.63, rely=0.214, height=20, relwidth=0.093)
        self.ec_p_E.configure(background="white")
        self.ec_p_E.configure(disabledforeground="#a3a3a3")
        self.ec_p_E.configure(font="TkFixedFont")
        self.ec_p_E.configure(foreground="#000000")
        self.ec_p_E.configure(highlightbackground="#d9d9d9")
        self.ec_p_E.configure(highlightcolor="black")
        self.ec_p_E.configure(insertbackground="black")
        self.ec_p_E.configure(selectbackground="blue")
        self.ec_p_E.configure(selectforeground="white")

        self.Label3 = tk.Label(self.Elliptic_Curves)
        self.Label3.place(relx=0.055, rely=0.348, height=31, width=94)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(font="-family {Segoe UI} -size 14")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Projective''')

        self.ec_group_order_B = tk.Button(self.Elliptic_Curves)
        self.ec_group_order_B.place(relx=0.384, rely=0.358, height=24, width=77)
        self.ec_group_order_B.configure(activebackground="#ececec")
        self.ec_group_order_B.configure(activeforeground="#000000")
        self.ec_group_order_B.configure(background="#d9d9d9")
        self.ec_group_order_B.configure(disabledforeground="#a3a3a3")
        self.ec_group_order_B.configure(foreground="#000000")
        self.ec_group_order_B.configure(highlightbackground="#d9d9d9")
        self.ec_group_order_B.configure(highlightcolor="black")
        self.ec_group_order_B.configure(pady="0")
        self.ec_group_order_B.configure(text='''Group Order''')

        self.ec_identity_B = tk.Button(self.Elliptic_Curves)
        self.ec_identity_B.place(relx=0.644, rely=0.358, height=24, width=47)
        self.ec_identity_B.configure(activebackground="#ececec")
        self.ec_identity_B.configure(activeforeground="#000000")
        self.ec_identity_B.configure(background="#d9d9d9")
        self.ec_identity_B.configure(disabledforeground="#a3a3a3")
        self.ec_identity_B.configure(foreground="#000000")
        self.ec_identity_B.configure(highlightbackground="#d9d9d9")
        self.ec_identity_B.configure(highlightcolor="black")
        self.ec_identity_B.configure(pady="0")
        self.ec_identity_B.configure(text='''Identity''')

        self.Label3_1 = tk.Label(self.Elliptic_Curves)
        self.Label3_1.place(relx=0.055, rely=0.481, height=31, width=94)
        self.Label3_1.configure(activebackground="#f9f9f9")
        self.Label3_1.configure(activeforeground="black")
        self.Label3_1.configure(anchor='w')
        self.Label3_1.configure(background="#d9d9d9")
        self.Label3_1.configure(disabledforeground="#a3a3a3")
        self.Label3_1.configure(font="-family {Segoe UI} -size 14")
        self.Label3_1.configure(foreground="#000000")
        self.Label3_1.configure(highlightbackground="#d9d9d9")
        self.Label3_1.configure(highlightcolor="black")
        self.Label3_1.configure(text='''Affine''')

        self.ec_show_points_B = tk.Button(self.Elliptic_Curves)
        self.ec_show_points_B.place(relx=0.384, rely=0.481, height=24, width=77)
        #self.ec_show_points_B.place(relx=0.384, rely=0.489, height=24, width=77)
        self.ec_show_points_B.configure(activebackground="#ececec")
        self.ec_show_points_B.configure(activeforeground="#000000")
        self.ec_show_points_B.configure(background="#d9d9d9")
        self.ec_show_points_B.configure(command=self.ec_show_points)
        self.ec_show_points_B.configure(disabledforeground="#a3a3a3")
        self.ec_show_points_B.configure(foreground="#000000")
        self.ec_show_points_B.configure(highlightbackground="#d9d9d9")
        self.ec_show_points_B.configure(highlightcolor="black")
        self.ec_show_points_B.configure(pady="0")
        self.ec_show_points_B.configure(text='''Show Points''')

        self.ec_print_points_B = tk.Button(self.Elliptic_Curves)
        self.ec_print_points_B.place(relx=0.63, rely=0.481, height=24, width=77)
        self.ec_print_points_B.configure(activebackground="#ececec")
        self.ec_print_points_B.configure(activeforeground="#000000")
        self.ec_print_points_B.configure(background="#d9d9d9")
        self.ec_print_points_B.configure(command=self.ec_print_points)
        self.ec_print_points_B.configure(disabledforeground="#a3a3a3")
        self.ec_print_points_B.configure(foreground="#000000")
        self.ec_print_points_B.configure(highlightbackground="#d9d9d9")
        self.ec_print_points_B.configure(highlightcolor="black")
        self.ec_print_points_B.configure(pady="0")
        self.ec_print_points_B.configure(text='''Print Points''')

        self.hasses_B = tk.Button(self.Elliptic_Curves)
        self.hasses_B.place(relx=0.493, rely=0.556, height=24, width=97)
        #self.hasses_B.place(relx=0.63, rely=0.489, height=24, width=85)
        self.hasses_B.configure(activebackground="#ececec")
        self.hasses_B.configure(activeforeground="#000000")
        self.hasses_B.configure(background="#d9d9d9")
        #self.hasses_B.configure(command=)
        self.hasses_B.configure(disabledforeground="#a3a3a3")
        self.hasses_B.configure(foreground="#000000")
        self.hasses_B.configure(highlightbackground="#d9d9d9")
        self.hasses_B.configure(highlightcolor="black")
        self.hasses_B.configure(pady="0")
        self.hasses_B.configure(text='''Hasse's Bound''')

        self.Label3_1_1 = tk.Label(self.Elliptic_Curves)
        self.Label3_1_1.place(relx=0.055, rely=0.615, height=31, width=94)
        self.Label3_1_1.configure(activebackground="#f9f9f9")
        self.Label3_1_1.configure(activeforeground="black")
        self.Label3_1_1.configure(anchor='w')
        self.Label3_1_1.configure(background="#d9d9d9")
        self.Label3_1_1.configure(disabledforeground="#a3a3a3")
        self.Label3_1_1.configure(font="-family {Segoe UI} -size 14")
        self.Label3_1_1.configure(foreground="#000000")
        self.Label3_1_1.configure(highlightbackground="#d9d9d9")
        self.Label3_1_1.configure(highlightcolor="black")
        self.Label3_1_1.configure(text='''Points''')

        self.Label4 = tk.Label(self.Elliptic_Curves)
        self.Label4.place(relx=0.384, rely=0.634, height=21, width=34)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(font="-family {Segoe UI} -size 12")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''P''')

        self.Label4_1 = tk.Label(self.Elliptic_Curves)
        self.Label4_1.place(relx=0.575, rely=0.634, height=21, width=34)
        self.Label4_1.configure(activebackground="#f9f9f9")
        self.Label4_1.configure(activeforeground="black")
        self.Label4_1.configure(background="#d9d9d9")
        self.Label4_1.configure(disabledforeground="#a3a3a3")
        self.Label4_1.configure(font="-family {Segoe UI} -size 12")
        self.Label4_1.configure(foreground="#000000")
        self.Label4_1.configure(highlightbackground="#d9d9d9")
        self.Label4_1.configure(highlightcolor="black")
        self.Label4_1.configure(text='''Q''')

        self.ec_p_x_E = tk.Entry(self.Elliptic_Curves)
        self.ec_p_x_E.place(relx=0.384, rely=0.695, height=20, relwidth=0.093)
        self.ec_p_x_E.configure(background="white")
        self.ec_p_x_E.configure(disabledforeground="#a3a3a3")
        self.ec_p_x_E.configure(font="TkFixedFont")
        self.ec_p_x_E.configure(foreground="#000000")
        self.ec_p_x_E.configure(highlightbackground="#d9d9d9")
        self.ec_p_x_E.configure(highlightcolor="black")
        self.ec_p_x_E.configure(insertbackground="black")
        self.ec_p_x_E.configure(selectbackground="blue")
        self.ec_p_x_E.configure(selectforeground="white")

        self.ec_p_y_E = tk.Entry(self.Elliptic_Curves)
        self.ec_p_y_E.place(relx=0.384, rely=0.775, height=20, relwidth=0.093)
        self.ec_p_y_E.configure(background="white")
        self.ec_p_y_E.configure(disabledforeground="#a3a3a3")
        self.ec_p_y_E.configure(font="TkFixedFont")
        self.ec_p_y_E.configure(foreground="#000000")
        self.ec_p_y_E.configure(highlightbackground="#d9d9d9")
        self.ec_p_y_E.configure(highlightcolor="black")
        self.ec_p_y_E.configure(insertbackground="black")
        self.ec_p_y_E.configure(selectbackground="blue")
        self.ec_p_y_E.configure(selectforeground="white")

        self.ec_q_x_E = tk.Entry(self.Elliptic_Curves)
        self.ec_q_x_E.place(relx=0.575, rely=0.695, height=20, relwidth=0.093)
        self.ec_q_x_E.configure(background="white")
        self.ec_q_x_E.configure(disabledforeground="#a3a3a3")
        self.ec_q_x_E.configure(font="TkFixedFont")
        self.ec_q_x_E.configure(foreground="#000000")
        self.ec_q_x_E.configure(highlightbackground="#d9d9d9")
        self.ec_q_x_E.configure(highlightcolor="black")
        self.ec_q_x_E.configure(insertbackground="black")
        self.ec_q_x_E.configure(selectbackground="blue")
        self.ec_q_x_E.configure(selectforeground="white")

        self.ec_q_y_E = tk.Entry(self.Elliptic_Curves)
        self.ec_q_y_E.place(relx=0.575, rely=0.775, height=20, relwidth=0.093)
        self.ec_q_y_E.configure(background="white")
        self.ec_q_y_E.configure(disabledforeground="#a3a3a3")
        self.ec_q_y_E.configure(font="TkFixedFont")
        self.ec_q_y_E.configure(foreground="#000000")
        self.ec_q_y_E.configure(highlightbackground="#d9d9d9")
        self.ec_q_y_E.configure(highlightcolor="black")
        self.ec_q_y_E.configure(insertbackground="black")
        self.ec_q_y_E.configure(selectbackground="blue")
        self.ec_q_y_E.configure(selectforeground="white")

        self.ec_p_inverse_B = tk.Button(self.Elliptic_Curves)
        self.ec_p_inverse_B.place(relx=0.11, rely=0.882, height=24, width=47)
        self.ec_p_inverse_B.configure(activebackground="#ececec")
        self.ec_p_inverse_B.configure(activeforeground="#000000")
        self.ec_p_inverse_B.configure(background="#d9d9d9")
        self.ec_p_inverse_B.configure(command=self.ec_inverse)
        self.ec_p_inverse_B.configure(disabledforeground="#a3a3a3")
        self.ec_p_inverse_B.configure(foreground="#000000")
        self.ec_p_inverse_B.configure(highlightbackground="#d9d9d9")
        self.ec_p_inverse_B.configure(highlightcolor="black")
        self.ec_p_inverse_B.configure(pady="0")
        self.ec_p_inverse_B.configure(text='''-P''')

        self.ec_p_order_B = tk.Button(self.Elliptic_Curves)
        self.ec_p_order_B.place(relx=0.274, rely=0.882, height=24, width=47)
        self.ec_p_order_B.configure(activebackground="#ececec")
        self.ec_p_order_B.configure(activeforeground="#000000")
        self.ec_p_order_B.configure(background="#d9d9d9")
        self.ec_p_order_B.configure(command=self.ec_p_order)
        self.ec_p_order_B.configure(disabledforeground="#a3a3a3")
        self.ec_p_order_B.configure(foreground="#000000")
        self.ec_p_order_B.configure(highlightbackground="#d9d9d9")
        self.ec_p_order_B.configure(highlightcolor="black")
        self.ec_p_order_B.configure(pady="0")
        self.ec_p_order_B.configure(text='''o(P)''')

        self.ec_p_generate_B = tk.Button(self.Elliptic_Curves)
        self.ec_p_generate_B.place(relx=0.438, rely=0.882, height=24, width=47)
        self.ec_p_generate_B.configure(activebackground="#ececec")
        self.ec_p_generate_B.configure(activeforeground="#000000")
        self.ec_p_generate_B.configure(background="#d9d9d9")
        self.ec_p_generate_B.configure(disabledforeground="#a3a3a3")
        self.ec_p_generate_B.configure(foreground="#000000")
        self.ec_p_generate_B.configure(highlightbackground="#d9d9d9")
        self.ec_p_generate_B.configure(highlightcolor="black")
        self.ec_p_generate_B.configure(pady="0")
        self.ec_p_generate_B.configure(text='''<P>''')

        self.ec_p_nP_B = tk.Button(self.Elliptic_Curves)
        self.ec_p_nP_B.place(relx=0.767, rely=0.882, height=24, width=47)
        self.ec_p_nP_B.configure(activebackground="#ececec")
        self.ec_p_nP_B.configure(activeforeground="#000000")
        self.ec_p_nP_B.configure(background="#d9d9d9")
        self.ec_p_nP_B.configure(disabledforeground="#a3a3a3")
        self.ec_p_nP_B.configure(foreground="#000000")
        self.ec_p_nP_B.configure(highlightbackground="#d9d9d9")
        self.ec_p_nP_B.configure(highlightcolor="black")
        self.ec_p_nP_B.configure(pady="0")
        self.ec_p_nP_B.configure(text='''nP''')

        self.ec_p_q_addition_B_1 = tk.Button(self.Elliptic_Curves)
        self.ec_p_q_addition_B_1.place(relx=0.603, rely=0.882, height=24
                , width=47)
        self.ec_p_q_addition_B_1.configure(activebackground="#ececec")
        self.ec_p_q_addition_B_1.configure(activeforeground="#000000")
        self.ec_p_q_addition_B_1.configure(background="#d9d9d9")
        self.ec_p_q_addition_B_1.configure(command=self.ec_addition)
        self.ec_p_q_addition_B_1.configure(disabledforeground="#a3a3a3")
        self.ec_p_q_addition_B_1.configure(foreground="#000000")
        self.ec_p_q_addition_B_1.configure(highlightbackground="#d9d9d9")
        self.ec_p_q_addition_B_1.configure(highlightcolor="black")
        self.ec_p_q_addition_B_1.configure(pady="0")
        self.ec_p_q_addition_B_1.configure(text='''P+Q''')

        self.ec_p_n_E = tk.Entry(self.Elliptic_Curves)
        self.ec_p_n_E.place(relx=0.795, rely=0.695, height=20, relwidth=0.093)
        self.ec_p_n_E.configure(background="white")
        self.ec_p_n_E.configure(disabledforeground="#a3a3a3")
        self.ec_p_n_E.configure(font="TkFixedFont")
        self.ec_p_n_E.configure(foreground="#000000")
        self.ec_p_n_E.configure(highlightbackground="#d9d9d9")
        self.ec_p_n_E.configure(highlightcolor="black")
        self.ec_p_n_E.configure(insertbackground="black")
        self.ec_p_n_E.configure(selectbackground="blue")
        self.ec_p_n_E.configure(selectforeground="white")

        self.Label4_1_1 = tk.Label(self.Elliptic_Curves)
        self.Label4_1_1.place(relx=0.795, rely=0.634, height=21, width=34)
        self.Label4_1_1.configure(activebackground="#f9f9f9")
        self.Label4_1_1.configure(activeforeground="black")
        self.Label4_1_1.configure(background="#d9d9d9")
        self.Label4_1_1.configure(disabledforeground="#a3a3a3")
        self.Label4_1_1.configure(font="-family {Segoe UI} -size 12")
        self.Label4_1_1.configure(foreground="#000000")
        self.Label4_1_1.configure(highlightbackground="#d9d9d9")
        self.Label4_1_1.configure(highlightcolor="black")
        self.Label4_1_1.configure(text='''n''')

        self.ec_b_E = tk.Entry(self.Elliptic_Curves)
        self.ec_b_E.place(relx=0.466, rely=0.214, height=20, relwidth=0.093)
        self.ec_b_E.configure(background="white")
        self.ec_b_E.configure(disabledforeground="#a3a3a3")
        self.ec_b_E.configure(font="TkFixedFont")
        self.ec_b_E.configure(foreground="#000000")
        self.ec_b_E.configure(highlightbackground="#d9d9d9")
        self.ec_b_E.configure(highlightcolor="black")
        self.ec_b_E.configure(insertbackground="black")
        self.ec_b_E.configure(selectbackground="blue")
        self.ec_b_E.configure(selectforeground="white")

        self.results_TB = tk.Text(top)
        self.results_TB.place(relx=0.013, rely=0.534, relheight=0.393
                , relwidth=0.97)
        self.results_TB.configure(background="white")
        self.results_TB.configure(font="TkTextFont")
        self.results_TB.configure(foreground="black")
        self.results_TB.configure(highlightbackground="#d9d9d9")
        self.results_TB.configure(highlightcolor="black")
        self.results_TB.configure(insertbackground="black")
        self.results_TB.configure(selectbackground="blue")
        self.results_TB.configure(selectforeground="white")
        self.results_TB.configure(wrap="word")

        self.Button4 = tk.Button(top)
        self.Button4.place(relx=0.476, rely=0.938, height=24, width=47)
        self.Button4.configure(activebackground="#ececec")
        self.Button4.configure(activeforeground="#000000")
        self.Button4.configure(background="#d9d9d9")
        self.Button4.configure(command=self.clear_TB)
        self.Button4.configure(disabledforeground="#a3a3a3")
        self.Button4.configure(foreground="#000000")
        self.Button4.configure(highlightbackground="#d9d9d9")
        self.Button4.configure(highlightcolor="black")
        self.Button4.configure(pady="0")
        self.Button4.configure(text='''Clear''')

if __name__ == '__main__':
    vp_start_gui()
